---
description: 
globs: 
alwaysApply: true
---
# Project Structure & Code Organization

## Standard Guides
- Use `pnpm` for all package installations and management.
- Use `tailwindcss@4` for styling.
- Use `shadcn` for any reusable components.

## Core Libraries and Versions
- Astro: ^5.5.x
- TypeScript: ^5.x.x
- Tailwind CSS: ^4.x.x
- shadcn/ui: Latest components

## Naming Conventions
- `kebab-case` - for all folders/files
- `_kebab-case` - for feature domain's specific common modules
- `_kebab-case` - for route domain's specific common modules
- `PascalCase` - for classes and types
- `snake_case` - for database tables and columns
- `camelCase` - for functions, zod schemas and etc.

## Common Modules
- `assets` - for assets
- `components` - for components
- `constants` - for constants
- `data` - for data access layer (e.g. `api`, `database`)
- `lib` - for 3rd party integrations (e.g `s3`, `sendgrid`, `sqs`)
- `services` - for business logic and orchestration of data access layer **(Only if necessary)**
- `types` - for types
- `utils` - for utilities
  
## Domain Folders
- `src` - main source code and shared common modules
- `src/pages` - main router folder
- `src/features` - main features folder **(Only if necessary)**

## Shared Modules Structure
Shared modules follow this structure:

```
src/
├── assets/                 # Shared assets module
├── components/             # Shared dumb components module
│   └── ui/                 # UI components (button, input, etc.)
├── constants/              # Shared constants module
├── data/                   # Shared data access layer module (API, database)
├── lib/                    # Shared 3rd party integrations
├── services/               # Shared business logic (only if necessary)
├── types/                  # Shared types
└── utils/                  # Shared utilities
```

## Routes Domain Structure - Default
When creating new page/route files, follow this structure:

```
src/pages/<route-name>/
├── index.tsx               # Route's entry point
├── _components/            # Route's components
├── _constants/             # Route's constants
├── _hooks/                 # Route's hooks
├── _types/                 # Route's types
└── _utils/                 # Route's utilities
```

## Feature Domain Structure - Optional
When creating new feature files, follow this structure:

```
src/features/<feature-name>/
├── index.ts                # Feature's entry point
├── _assets/                # Feature's assets (only if necessary)
├── _components/            # Feature's components
├── _constants/             # Feature's constants
├── _data/                  # Feature's data access layer (only if necessary)
├── _lib/                   # Feature's 3rd party integrations (only if necessary)
├── _services/              # Feature's business logic (only if necessary)
├── _types/                 # Feature's types
└── _utils/                 # Feature's utilities
```